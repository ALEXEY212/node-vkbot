'use strict';

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
 */

/**
 * Module dependencies
 * @private
 */
const config      = require('../../config');
const debug       = require('../../lib/simple-debug')(__filename);
const LongPolling = require('./longpolling');
const processing  = require('./processing');
const Queue       = require('./queue');

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–æ–≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π).
 * @param  {Number} flag –§–ª–∞–≥ —Å–æ–æ–±—â–µ–Ω–∏—è (vk.com/dev/using_longpoll_2)
 * @return {Boolean}
 * @private
 */
function checkPmFlags (flag) {
  let flags = [33, 49, 545, 561];

  return !!~flags.indexOf(flag);
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã (messages.getChatUsers) –≤ –æ–±—ä–µ–∫—Ç. 
 *
 * @param  {Array}    array   –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
 * @param  {Number}   botId   ID –±–æ—Ç–∞
 * @return {Object}
 * @private
 *
 * –í–∏–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞:
 *
 * {
 *   [user_id]: {
 *     firstName:    [first_name], 
 *     lastName:     [last_name], 
 *     chatAdmin:    [true/false], 
 *     botInviter:   [true/undefined], 
 *     invitedByBot: [true/false]
 *   }
 * }
 */
function chatUsersArrayToObj (array, botId) {
  let obj = {};
  let botInviter = null;

  for (let i = 0, len = array.length; i < len; i++) {
    let current = array[i];

    obj[current.id] = {
      firstName: current.first_name, 
      lastName: current.last_name
    }

    if (current.id === botId && current.id !== current.invited_by) 
      botInviter = current.invited_by;

    if (current.id === current.invited_by) 
      obj[current.id].chatAdmin = true;

    if (current.id !== botId && current.invited_by === botId) 
      obj[current.id].invitedByBot = true;
  }

  // –ï—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–µ—Å–µ–¥–µ, 
  // —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–Ω –ø—Ä–∏–≥–ª–∞—Å–∏–ª –±–æ—Ç–∞
  if (botInviter != null && obj[botInviter] != undefined) 
    obj[botInviter].botInviter = true;

  return obj;
}

/**
 * Messages Class
 */
class Messages {
  constructor (parent) {
    // –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Bot
    this.parent = parent;

    // –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é —Å–æ–æ–±—â–µ–Ω–∏–π
    this.Queue = new Queue();

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LongPoll –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
     * @private
     */
    this._LongPolling = new LongPolling(this);

    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ª–æ–≥–∞—Ö. 
     *
     * –§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ —Å–≤–æ–π—Å—Ç–≤:
     *   <chat_id>: {
     *     users:            [users_object], 
     *     mode:             [chat_mode],
     *     botsCheckingTime: [bots_checking], 
     *     lastMessage:      String, 
     *     [_votes] (/vote)
     *   }
     *
     * [users_object] Object (undefined for personal chats) {
     *   <user_id>: {
     *     firstName:    String, 
     *     lastName:     String, 
     *     chatAdmin:    Boolean, 
     *     botInviter:   Boolean, 
     *     invitedByBot: Boolean
     *   }
     * } or null if bot has leaved by himself
     *
     * [chat_mode] String (undefined for personal chats)
     *   undefined or 'default' : default chat mode
     *   'vote'                 : voting mode (/vote)
     *
     * [bots_checking] Number (undefined for personal chats)
     * 
     * @private
     */
    this._conversations = new Proxy({}, {
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–≤–æ–π—Å—Ç–≤—É 
      // "prop", –≥–¥–µ prop = chat_id
      get: function (target, prop) {
        if (target[prop] === undefined) 
          target[prop] = {};
        
        return target[prop];
      }
    });

    /**
     * Timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @type {Number}
     * @private
     */
    this._lastMessageTime = 0;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã
   * @param  {Number} chat_id ID –±–µ—Å–µ–¥—ã
   * @return {Promise}
   * @private
   */
  _updateChatComp (chat_id) {
    return this.parent.VKApi.call('messages.getChatUsers', { chat_id, fields: 'first_name' })
      .then(response => {
        // –ë–æ—Ç–∞ —É–∂–µ –Ω–µ—Ç –≤ –±–µ—Å–µ–¥–µ. –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        if (response.length === 0) {
          // 1. –£–¥–∞–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          delete this._conversations[chat_id].users;

          // 2. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
          // –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –±–æ—Ç–∞ –∫–∏–∫–Ω—É–ª–∏ (—ç—Ç–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏–≤ response.length === 0), 
          // —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è. –î–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É–¥–∞–ª–∏—Ç—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
          // –ù–æ, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å—ë-—Ç–∞–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è, –¥–∞–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å.
          this.Queue.clear(chat_id);

          return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        this._conversations[chat_id].users = chatUsersArrayToObj(response, this.parent._botId);
      })
      .catch(error => {
        // Internal server error or Too many requests error
        if (error.name === 'VKApiError' && (error.code === 10 || error.code === 6)) 
          return;

        debug.err('Error in _updateChatComp');
        debug.err(error);

        // –°–Ω–æ–≤–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        return this._updateChatComp(chat_id);
      });
  }

  /**
   * "–¶–∏–∫–ª" –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å LongPoll —Å–µ—Ä–≤–µ—Ä–∞, –∞ —Ç–∞–∫–∂–µ
   * –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @private
   */
  _updatesLoop () {
    // –£—Å—Ç–∞–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ "updates". 
    // –ú–∞—Å—Å–∏–≤—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ LongPolling –ø–æ–ø–∞–¥–∞—é—Ç —Å—é–¥–∞
    this._LongPolling.on('updates', updatesArray => {
      // –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –º–∞—Å—Å–∏–≤—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      for (let i = 0, len = updatesArray.length; i < len; i++) {
        let current = updatesArray[i];

        // –ó–Ω–∞—á–µ–Ω–∏–µ 51 –≤ –Ω—É–ª–µ–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –º–∞—Å—Å–∏–≤–∞ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ —Ç–æ–º, 
        // —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ—Å–µ–¥—ã –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞. –ü–æ—ç—Ç–æ–º—É –æ–±–Ω–æ–≤–ª—è–µ–º 
        // —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–µ–∫—É—â–µ–π –±–µ—Å–µ–¥—ã
        if (current[0] === 51 && this._conversations[current[1]].users) 
          this._updateChatComp(parseInt(current[1]));

        // –ó–Ω–∞—á–µ–Ω–∏–µ 4 –≤ –Ω—É–ª–µ–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –º–∞—Å—Å–∏–≤–∞ -> –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. 
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
        if (current[0] === 4 && ((current[7].from && parseInt(current[7].from) !== this.parent._botId) || checkPmFlags(current[2]))) {
          let currentUserId = current[7].from ? parseInt(current[7].from) : parseInt(current[3]);

          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞–ø–∏—Å–∞–≤—à–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Ç–æ 
          // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ –±—É–¥–µ—Ç. 
          if (this.parent.parent._databases['banned'].data.includes(currentUserId)) 
            return;

          processing.call(this, current);
        }
      }
    });

    debug.out('+ LongPolling listener was set');

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ LongPoll —Å–µ—Ä–≤–µ—Ä—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    this._LongPolling.check();

    debug.out('+ LongPolling checking was started');
  }

  /**
   * "–¶–∏–∫–ª" –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. 
   * –ï—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   * @private
   */
  _queueLoop () {
    let queue = this.Queue;

    if (!queue.isEmpty()) {
      let message = queue.dequeue();

      // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ === null, –∑–Ω–∞—á–∏—Ç, –±–æ—Ç —É—à—ë–ª —Å–∞–º –∏–∑ —á–∞—Ç–∞ chat_id
      // –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
      if (message && message.chat_id && this._conversations[message.chat_id].users === null) 
        message = null;

      return this._send(message)
        .then(() => {
          // –û–±–Ω–æ–≤–∏–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          this._lastMessageTime = Date.now();

          return setTimeout(() => this._queueLoop(), config.messages.delay);
        })
        .catch(error => {
          debug.err('- Error in Messages._queueLoop()');
          debug.err(error.stack);

          return setTimeout(() => this._queueLoop(), config.messages.delay);
        });
    }

    return setTimeout(() => this._queueLoop(), config.messages.delay);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
   * @param  {Object} messageObj –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @return {Promise}
   * @private
   */
  _send (messageObj) {
    if (messageObj === null) 
      return Promise.resolve();

    return this.parent.VKApi.call('messages.send', messageObj)
      .catch(error => {
        // Flood Control error
        if (error.name === 'VKApiError' && error.code === 9) {
          messageObj.message = messageObj.message + ' üòä';

          return this._send(messageObj);
        }

        // Internal server error
        if (error.name === 'VKApiError' && error.code === 10) 
          return;

        debug.err('Messages.send()', error);
      });
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –±–µ—Å–µ–¥—ã.
   * @param {String} mode –†–µ–∂–∏–º
   * @public
   */
  setChatMode (chatId, mode) {
    this._conversations[chatId].mode = mode;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –±–µ—Å–µ–¥—ã.
   * @param  {Number} chatId ID –±–µ—Å–µ–¥—ã
   * @return {String}
   * @public
   */
  getChatMode (chatId) {
    return this._conversations[chatId].mode;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–¥—É–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π:
   * 1. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏;
   * 2. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LongPoll.
   * @public
   */
  start () {
    this._updatesLoop();
    this._queueLoop();
  }
}

module.exports = Messages;