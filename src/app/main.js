'use strict';

/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (./app)
 *
 * –°–æ–∑–¥–∞—ë—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞. 
 * –í—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫–ª–∞—Å—Å–µ Application. 
 */

/**
 * Module dependencies.
 * @private
 */
const async        = require('async');
const JsonDatabase = require('node-json-db');
const timeago      = require('timeago.js');
      // –î–æ–±–∞–≤–∏–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è timeago.js
      timeago.register('ru', require('../../node_modules/timeago.js/locales/ru'));

const Application  = require('./application/Application');
const debug        = require('../lib/simple-debug')(__filename);
const init         = require('./application/init');
const pm2sender    = require('../lib/pm2-sender');

// Accounts data
const accounts    = require('../accounts');
const accountKeys = Object.keys(accounts);

// Database files
const usersDatabase  = new JsonDatabase('./data/users.json', true);
const bannedDatabase = new JsonDatabase('./data/banned.json', true);

const app = new Application();

debug.out('= Loading databases');

usersDatabase.load();
bannedDatabase.load();

debug.out('= Starting of all the bots was begin');

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –≤—Å–µ—Ö –±–æ—Ç–æ–≤, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ accounts.js:
 *   1. –ë—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞;
 *   2. –ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞;
 *   3. –ë—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞.
 */
async.series(
  // –°–æ—Å—Ç–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
  accountKeys.map(botId => {
    let authData   = accounts[botId];
    let initObject = Object.assign(authData, { id: botId });
    
    return init(initObject);
  }), 

  /**
   * –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤
   * @param  {Object} error   
   * @param  {Array} results  –ú–∞—Å—Å–∏–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–æ–≤
   * @private
   */
  function (error, results) {
    // –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω.
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å –æ—à–∏–±–∫–æ–π.
    if (error) {
      debug.err('- Fatal error: one of tokens was not got. Shutting down');
      process.exit(0);
    }

    debug.out('+ All bots\' instances were created.');

    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.add(results);

    // –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    app._databases['users']  = usersDatabase;
    app._databases['banned'] = bannedDatabase;

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.start();

    debug.out('+ All bots were started.');
  }
);


/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞–º "–û—Ñ—Ñ–ª–∞–π–Ω" –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. 
 * –ê —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
process.on('SIGINT', () => {
  debug.err('= SIGINT received. Saving data and turning off bots');

  // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–æ–≤
  app.stop();

  debug.err('+ All bots were turned off');

  // –ó–∞–≤–µ—Ä—à–∏–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω.
  // –ü—Ä–∏ —ç—Ç–æ–º, –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è .shutdown() –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞.
  // process.exit(0);
});

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–∂–ø—Ä–æ—Ü–µ—Å—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param  {Object} messageObject
 */
process.on('message', messageObject => {
  let event  = messageObject.data.event;
  let target = messageObject.data.target;

  // –û–±—Ä–∞–±–æ—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  if (event === 'database_updated') {
    if (target === 'banned.json') 
      bannedDatabase.reload();

    if (target === 'users.json') 
      usersDatabase.reload();
  }

  // –û–±—Ä–∞–±–æ—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (event === 'data_needed') {
    // –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ "/status"
    if (target === 'status') {
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–æ–≤
      let botsInfo = [];

      for (let i = 0, keys = Object.keys(app.bots), len = keys.length; i < len; i++) {
        let currentBot                = app.bots[keys[i]];
        let currentBotName            = currentBot._name;
        let currentBotQueueLength     = currentBot.Messages.Queue.queue.length;
        let currentBotLastMessageTime = currentBot.Messages._lastMessageTime;
            currentBotLastMessageTime = (new timeago()).format(currentBotLastMessageTime, 'ru');

        botsInfo.push(`üê© ${currentBotName}\n‚úâ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: ${currentBotQueueLength}\n‚úè –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç: ${currentBotLastMessageTime}`);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      pm2sender('server', {
        botsInfo: botsInfo.join('\n\n')
      }, () => null);
    }
  }
});